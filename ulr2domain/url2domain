#!/usr/bin/env python
"""
Convert URLs to domains
"""
import sys
import fileinput
from urlparse import urlparse
from optparse import OptionParser

# Get here:
# http://mxr.mozilla.org/mozilla/source/netwerk/dns/src/effective_tld_names.dat?raw=1
EFFECTIVE_TLD = "effective_tld_names.dat"


def get_tlds():
    raw = open(EFFECTIVE_TLD).readlines()
    # remove comments, emptly lines and strip
    return [line.strip() for line in raw if line[0] not in "/\n"]


def get_domain(url, tlds):
    # Credits to http://stackoverflow.com/questions/1066933/how-to-extract-domain-name-from-url
    url_elements = urlparse(url)[1].split('.')
    # url_elements = ["abcde","co","uk"]

    for i in range(-len(url_elements), 0):
        last_i_elements = url_elements[i:]
        #    i=-3: ["abcde","co","uk"]
        #    i=-2: ["co","uk"]
        #    i=-1: ["uk"] etc

        candidate = ".".join(last_i_elements)  # abcde.co.uk, co.uk, uk
        wildcard_candidate = ".".join(["*"] + last_i_elements[1:])  # *.co.uk, *.uk, *
        exception_candidate = "!" + candidate

        # match tlds:
        if (exception_candidate in tlds):
            return ".".join(url_elements[i:])
        if (candidate in tlds or wildcard_candidate in tlds):
            return ".".join(url_elements[i - 1:])
            # returns "abcde.co.uk"
    raise ValueError("Domain not in global list of TLDs")


def check_pipe(files, field=-1, spliter=", "):
    """Reads URLS from stdin one per line"""
    tlds = get_tlds()
    counter = 0

    for line in fileinput.input(files):
        if field > -1:
            url = line.split(spliter)[field]
        else:
            url = line
        counter += 1
        try:
            if field > -1:
                print >> sys.stdout, line[:field - 1] + get_domain(url, tlds) + line[field:]  # , '\t', url.strip()
            else:
                print >> sys.stdout, get_domain(url, tlds)  # , '\t', url.strip()
        except ValueError:
            print >> sys.stdout, counter, url

if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-f", "--field",  dest="field", default=-1,
                      help="Number of field to convert inplace (starting 0), by default assume the data is single-columned", metavar="field")
    (options, files) = parser.parse_args()

    check_pipe(files, field=options.field)
